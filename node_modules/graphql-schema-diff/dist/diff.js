"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDiff = void 0;
const graphql_1 = require("graphql");
const utilities_1 = require("graphql/utilities");
const disparity_1 = __importDefault(require("disparity"));
const load_1 = require("@graphql-tools/load");
const url_loader_1 = require("@graphql-tools/url-loader");
const json_file_loader_1 = require("@graphql-tools/json-file-loader");
const graphql_file_loader_1 = require("@graphql-tools/graphql-file-loader");
const node_fetch_1 = __importDefault(require("node-fetch"));
async function getDiff(leftSchemaLocation, rightSchemaLocation, options = {}) {
    var _a, _b;
    const getSchemaOptions = (customHeaders) => ({
        headers: { ...options.headers, ...customHeaders },
        skipGraphQLImport: false,
        descriptions: false,
        customFetch: node_fetch_1.default,
    });
    const leftSchemaOptions = getSchemaOptions((_a = options.leftSchema) === null || _a === void 0 ? void 0 : _a.headers);
    const rightSchemaOptions = getSchemaOptions((_b = options.rightSchema) === null || _b === void 0 ? void 0 : _b.headers);
    let [leftSchema, rightSchema] = await Promise.all([
        (0, load_1.loadSchema)(leftSchemaLocation, {
            loaders: [new url_loader_1.UrlLoader(), new json_file_loader_1.JsonFileLoader(), new graphql_file_loader_1.GraphQLFileLoader()],
            ...leftSchemaOptions,
        }),
        (0, load_1.loadSchema)(rightSchemaLocation, {
            loaders: [new url_loader_1.UrlLoader(), new json_file_loader_1.JsonFileLoader(), new graphql_file_loader_1.GraphQLFileLoader()],
            ...rightSchemaOptions,
        }),
    ]);
    if (!leftSchema || !rightSchema) {
        throw new Error("Schemas not defined");
    }
    if (options.sortSchema) {
        [leftSchema, rightSchema] = [
            (0, utilities_1.lexicographicSortSchema)(leftSchema),
            (0, utilities_1.lexicographicSortSchema)(rightSchema),
        ];
    }
    const [leftSchemaSDL, rightSchemaSDL] = [
        (0, graphql_1.printSchema)(leftSchema),
        (0, graphql_1.printSchema)(rightSchema),
    ];
    if (leftSchemaSDL === rightSchemaSDL) {
        return;
    }
    const diff = disparity_1.default.unified(leftSchemaSDL, rightSchemaSDL, {
        paths: [leftSchemaLocation, rightSchemaLocation],
    });
    const diffNoColor = disparity_1.default.unifiedNoColor(leftSchemaSDL, rightSchemaSDL, {
        paths: [leftSchemaLocation, rightSchemaLocation],
    });
    const dangerousChanges = (0, graphql_1.findDangerousChanges)(leftSchema, rightSchema);
    const breakingChanges = (0, graphql_1.findBreakingChanges)(leftSchema, rightSchema);
    return {
        diff,
        diffNoColor,
        dangerousChanges,
        breakingChanges,
    };
}
exports.getDiff = getDiff;
